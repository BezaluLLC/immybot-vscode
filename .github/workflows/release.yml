name: Release VS Code Extension

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag name to release (e.g., v0.0.1)'
        required: false

permissions:
  contents: write

concurrency:
  group: release-${{ github.ref || inputs.tag }}
  cancel-in-progress: false

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.node-version'
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Build (production)
        run: npm run package-web

      - name: Determine release tag
        id: vars
        shell: bash
        run: |
          if [[ -n "${{ inputs.tag }}" ]]; then
            TAG="${{ inputs.tag }}"
          elif [[ "${GITHUB_REF_TYPE}" == "tag" && -n "${GITHUB_REF_NAME}" ]]; then
            TAG="${GITHUB_REF_NAME}"
          else
            PKG_VER=$(node -p "require('./package.json').version")
            TAG="v${PKG_VER}"
          fi
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"
          echo "version_from_tag=${TAG#v}" >> "$GITHUB_OUTPUT"

      - name: Check package.json version vs tag (non-blocking)
        shell: bash
        run: |
          PKG_VERSION=$(node -p "require('./package.json').version")
          TAG_VERSION="${{ steps.vars.outputs.version_from_tag }}"
          if [[ "$PKG_VERSION" != "$TAG_VERSION" ]]; then
            echo "::warning::Tag version ($TAG_VERSION) does not match package.json version ($PKG_VERSION). The .vsix will use $PKG_VERSION."
          else
            echo "Version check OK: $PKG_VERSION"
          fi

      - name: Package extension (.vsix)
        id: pkg
        shell: bash
        run: |
          NAME=$(node -p "require('./package.json').name")
          VER=$(node -p "require('./package.json').version")
          VSIX_NAME="$NAME-$VER.vsix"
          npx --yes @vscode/vsce@latest package -o "$VSIX_NAME"
          echo "vsix_name=$VSIX_NAME" >> "$GITHUB_OUTPUT"

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: vsix
          path: ${{ steps.pkg.outputs.vsix_name }}
          if-no-files-found: error

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.vars.outputs.tag }}
          files: ${{ steps.pkg.outputs.vsix_name }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
